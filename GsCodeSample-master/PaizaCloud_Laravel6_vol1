#--------------------------------------------
#Laravelインストール
#--------------------------------------------

composer create-project laravel/laravel cms 6.* --prefer-dist


#--------------------------------------------
#ディレクトリ移動
#--------------------------------------------

cd cms


#--------------------------------------------
#Composerコマンド実行
#--------------------------------------------

sudo composer update


#--------------------------------------------
#BuiltInサーバーを起動：動作確認
#--------------------------------------------

php artisan serve


#--------------------------------------------
#.env（ファイル内の同じ箇所を上書き）
#--------------------------------------------

DB_CONNECTION=mysql
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=c9
DB_USERNAME=root
DB_PASSWORD=


#--------------------------------------------
# /app/Providers/ AppServiceProvider.php ファイルを修正
#--------------------------------------------

use Illuminate\Support\Facades\URL;     //この行を追加

public function boot() {

   URL::forceScheme('https');           //この行を追加
   
}



#--------------------------------------------
#データベース作成(phpMyAdminで確認でもOK)
#--------------------------------------------

mysql -u root -p
root [Enterキー]
create database c9;
exit;



#**********************************************
#  超大事！！！！！！！！！！！！！！！
#  いつも使うので、覚えておくか直ぐコピペできる場所に書いておきましょう！
#*********************************************
# [.env] 設定を変更したら必ずWebサーバーを再起動！！


#--------------------------------------------
#Webサーバー止める
#--------------------------------------------

[ Ctl + C ]キーでWebサーバーを止めます。


#--------------------------------------------
#Webサーバー起動（.envの再読み込み！）
#--------------------------------------------

php artisan serve



#6.[完了]DB接続設定完了***
#  ＜重要＞間違うと「データ構造を作成（テーブル作成）」の次章でError!





#*********************************************************************************
#ここまでが初期設定
#*********************************************************************************






#***************************
# ◇第２章◇
# データ構造を作成（テーブル作成） 
#***************************
#--------------------------------------------
#１．booksテーブルを作成（マイグレーションファイル作成）
#--------------------------------------------

php artisan make:migration create_books_table --create=books



#--------------------------------------------
#２．[年]_[月]_[日]_[時分秒]_create_books_table.php
#   public function up(){...}の中を追加修正
#--------------------------------------------
public function up()
    {
        Schema::create('books', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('item_name');       //ここだけ追加
            $table->integer('item_number');    //ここだけ追加
            $table->integer('item_amount');    //ここだけ追加
            $table->datetime('published');     //ここだけ追加
            $table->timestamps();
        });
}



#--------------------------------------------
#３．マイグレーションを実行（テーブル作成）
#--------------------------------------------

php artisan migrate



#--------------------------------------------
#４．MySQL DBに作成されたテーブルを確認 
#   59ページ
#--------------------------------------------
#ブラウザで確認：する場合[phpMyAdmin]
# URL例： https://***********.com/phpMyAdmin/

# またはコマンドで確認する場合（コマンドに慣れてる人用）
mysql -u root -p
root [Enterキー]
use c9;
show tables;
desc books;
exit;




#--------------------------------------------
#５．モデルを作成（テーブルを簡単に扱えるようにする機能）
  64ページ
#--------------------------------------------

php artisan make:model Book



#--------------------------------------------
#６．モデルを作成（テーブルを簡単に扱えるようにする機能）
#   /app/Book.php に作成されます。
#--------------------------------------------

#6.[完了]/app/Book.phpにファイルができて完了***



#***************************
# 第３章
# ルート定義（ルーティング）
#***************************
#--------------------------------------------
#１．/routes/web.php に 以下コードを貼り付けます。
#   70ページ
#--------------------------------------------
#以下[END]までの全てのコードをコピー


use App\Book;
use Illuminate\Http\Request;

/**
* 本のダッシュボード表示(books.blade.php)
*/
Route::get('/', function () {
    return view('welcome');
});

/**
* 新「本」を追加 
*/
Route::post('/books', function (Request $request) {
    //
});

/**
* 本を削除 
*/
Route::delete('/book/{book}', function (Book $book) {
    //
});



#[END]--------------------------------------------





#***************************
# View
#***************************
#--------------------------------------------
#１．/resources/views/layouts/app.blade.php を作成
#   以下コードを貼り付けます。
#--------------------------------------------
#以下[END]までの全てのコードをコピー


<!-- resources/views/layouts/app.blade.php -->
<!DOCTYPE html>
<html lang="ja">
<head>
<title>Book List</title>
<!-- CSS と JavaScript -->
</head>
<body>
    <div class="container">
        <nav class="navbar navbar-default">
        <!-- ナビバーの内容 -->
        </nav>
    </div>
    @yield('content')
</body>
</html>


#[END]--------------------------------------------




#--------------------------------------------
#２．/resources/views/books.blade.php を作成
#   78ページ
#   以下コードを貼り付けます。
#--------------------------------------------
#以下[END]までの全てのコードをコピー


<!-- resources/views/books.blade.php -->
@extends('layouts.app')
@section('content')
    <!-- Bootstrapの定形コード… -->
    <div class="card-body">
        <div class="card-title">
            本のタイトル
        </div>
        
        <!-- バリデーションエラーの表示に使用-->
        @include('common.errors')
        <!-- バリデーションエラーの表示に使用-->

        <!-- 本登録フォーム -->
        <form action="{{ url('books') }}" method="POST" class="form-horizontal">
            {{ csrf_field() }}

            <!-- 本のタイトル -->
            <div class="form-group">
                <div class="col-sm-6">
                    <input type="text" name="item_name" class="form-control">
                </div>
            </div>

            <!-- 本 登録ボタン -->
            <div class="form-group">
                <div class="col-sm-offset-3 col-sm-6">
                    <button type="submit" class="btn btn-primary">
                        Save
                    </button>
                </div>
            </div>
        </form>
    </div>
    <!-- Book: 既に登録されてる本のリスト -->

@endsection



#[END]--------------------------------------------





#--------------------------------------------
# ３．/resources/views/common/errors.blade.php を作成 
# 81ページ
# 以下コードを貼り付けます。
#--------------------------------------------
#以下[END]までの全てのコードをコピー


<!-- resources/views/common/errors.blade.php -->
@if (count($errors) > 0)
    <!-- Form Error List -->
    <div class="alert alert-danger">
        <div><strong>入力した文字を修正してくた?さい。</strong></div> 
        <div>
            <ul>
            @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
            </ul>
        </div>
    </div>
@endif



#[END]--------------------------------------------




#--------------------------------------------
#４．/routes/web.php  以下コードに修正
#   70ページ
#--------------------------------------------
#以下[END]までの全てのコードをコピー

/**
* 本のダッシュボード表示(books.blade.php)
*/
Route::get('/', function () {
    return view('books');  //＊＊ ここを修正 ＊＊
});




#***************************
# Chapter10
#***************************
#--------------------------------------------
#１．/routes/web.php
#   86ページ
#   『新「本」を追加』のルート定義に以下コードを上書き。
#--------------------------------------------
#以下[END]までの全てのコードをコピー


Route::post('/books', function (Request $request) {

    //バリデーション
    $validator = Validator::make($request->all(), [
        'item_name' => 'required|max:255',
    ]);

    //バリデーション:エラー 
    if ($validator->fails()) {
        return redirect('/')
            ->withInput()
            ->withErrors($validator);
    }
    //以下に登録処理を記述（Eloquentモデル）




});


#[END]--------------------------------------------




#--------------------------------------------
#２．/routes/web.php 
#   88ページ
#   //以下に登録処理を記述（Eloquentモデル）コメントの下に以下コードを貼り付けます。
#--------------------------------------------
#以下[END]までの全てのコードをコピー


// Eloquentモデル
$books = new Book;
$books->item_name = $request->item_name;
$books->item_number = '1';
$books->item_amount = '1000';
$books->published = '2017-03-07 00:00:00';
$books->save(); 
return redirect('/');


#[END]--------------------------------------------



#***************************
# Chapter11
#***************************
#--------------------------------------------
#１．/routes/web.php
#   90ページ
#   『本のダッシュボード表示 』のルート定義に以下コードを上書き。
#--------------------------------------------
#以下[END]までの全てのコードをコピー


Route::get('/', function () {
    $books = Book::orderBy('created_at', 'asc')->get();
    return view('books', [
        'books' => $books
    ]);
    //return view('books',compact('books')); //も同じ意味
});


#[END]--------------------------------------------




#--------------------------------------------
#２．/resources/views/books.blade.php
#   91ページ
#   books.blade.php内の</form>タグの下行に以下コート?を追記
#--------------------------------------------
#以下[END]までの全てのコードをコピー


     <!-- 現在の本 -->
    @if (count($books) > 0)
        <div class="card-body">
            <div class="card-body">
                <table class="table table-striped task-table">
                    <!-- テーブルヘッダ -->
                    <thead>
                        <th>本一覧</th>
                        <th>&nbsp;</th>
                    </thead>
                    <!-- テーブル本体 -->
                    <tbody>
                        @foreach ($books as $book)
                            <tr>
                                <!-- 本タイトル -->
                                <td class="table-text">
                                    <div>{{ $book->item_name }}</div>
                                </td>

                                <!-- 本: 削除ボタン -->
                                <td>

                                </td>
                            </tr>
                        @endforeach
                    </tbody>
                </table>
            </div>
        </div>
    @endif



#[END]--------------------------------------------




#***************************
# Chapter1２
#***************************
#--------------------------------------------
#１．/resources/views/books.blade.php
#   96ページ
#   <!-- 本: 削除ボタン -->下の<td></td>要素内に追加
#--------------------------------------------
#以下[END]までの全てのコードをコピー


    <form action="{{ url('book/'.$book->id) }}" method="POST">
         {{ csrf_field() }}
         {{ method_field('delete') }}
        
        <button type="submit" class="btn btn-danger">
            削除
        </button>
     </form>



#[END]--------------------------------------------




#--------------------------------------------
#２．/routes/web.php
#   98ページ
#   『本を削除』のルート定義を追加編集
#--------------------------------------------
#以下[END]までの全てのコードをコピー


Route::delete('/book/{book}', function (Book $book) {
    $book->delete();       //追加
    return redirect('/');  //追加
});



#[END]--------------------------------------------




#***************************
# Login
#***************************
#--------------------------------------------
# Auth( ユーザー登録・認証画面 )
#--------------------------------------------
# laravel/ui パッケージをインストール（４ステップ！）
# 【注意】Laraveのバージョンを確認して実行しないとErrorになります！！
#  コマンド打って、yes/no がでたらyes で！！
-----

#1. Laravel 6.x の場合
composer require laravel/ui:^1.0 --dev

#2. artisan コマンドを実行
php artisan ui vue --auth

#3. npmパッケージをインストール
npm install

#4. パッケージをビルド
npm run dev

--------------------------------------------------
// ログイン機能・画面が作成されました。

#*エラーが出る場合(画面がくずる場合：JS/CSSが読み込めてない)
/resources/views/layouts/app.blade.php を修正
#２箇所の修正（https対応）
13行目： {{ asset('js/app.js') }} を {{ asset('js/app.js',true) }}
20行目： {{ asset('css/app.css') }} を {{ asset('css/app.css',true) }}
#--------------------------------------------




#***************************
# DocumentRoot
# (スタンダードプランで公開する場合にのみ変更！)
# linux viコマンド知っていないと変更できません！
#***************************

#1.Laravelのpublic内のファイルを全て→ public_htmlへ移動

#2.public_html/index.phpの24行目を以下に変更！
require __DIR__.'/../cms/vendor/autoload.php';

#3.public_html/index.phpの38行目を以下に変更！
$app = require_once __DIR__.'/../cms/bootstrap/app.php';

#4.ルート権限で実行
sudo su

#5.vi でdocumentRootを変更
vi /etc/apache2/sites-available/default-ssl.conf

#6.  DocumentRootを 「 /home/ubuntu/public_htm 」に変更

#7.vi でdocumentRootを変更
vi /etc/apache2/sites-available/000-default.conf

#8.  DocumentRootを 「 /home/ubuntu/public_htm 」に変更

#7.Apache再起動
systemctl restart apache2




#***************************
# 以下エラーがでたら！！
# 「The stream or file "/home/ubuntu/cms/storage/logs/laravel.log" could not be opened in append mode: failed to open stream: Permission denied 」
#***************************
sudo chown -R $USER:www-data storage

sudo chown -R $USER:www-data bootstrap/cache

chmod -R 775 storage

chmod -R 775 bootstrap/cache





#***************************
# ZIP 
#***************************
#ZIP圧縮
zip -r cms.zip cms

#ZIP解凍（展開）
unzip cms.zip

