###############################################################################
# 更新日：2021-10-11
#  PHP8.x.x AmazonLinux2 のインストール
###############################################################################


#PHPセットアップ
#<重要！！必ず１行ずつコマンドを打つこと！>
// パッケージのアップデート
sudo yum update -y

// composerバージョンアップ
sudo composer self-update

// PHPのパッケージをすべてアンインストール
sudo yum -y remove php-*

// amazon-linux-extrasをアップデート
sudo yum update -y amazon-linux-extras

// amazon-linux-extrasで使用中のパッケージと使えるパッケージを確認
amazon-linux-extras

// lamp-mariadb10.2-php7.2を使用停止
sudo amazon-linux-extras disable lamp-mariadb10.2-php7.2

// PHP8.0を有効化
sudo amazon-linux-extras enable php8.0

// インストールするパッケージの案内があったので、表示されたコマンドを実行
sudo yum clean metadata && sudo yum install php-cli php-pdo php-fpm php-mysqlnd
sudo yum install php-cli php-common php-devel php-fpm php-gd php-mysqlnd php-mbstring php-pdo php-xml

// apacheなどを再起動
sudo systemctl restart httpd.service
sudo systemctl restart php-fpm.service



# MaryaDB 構築
#MariaDBデフォルト確認
sudo yum list installed | grep mariadb


#MariaDBのインストール

sudo amazon-linux-extras install mariadb10.5 -y


#Apache, MariaDBの起動

sudo systemctl start mariadb

sudo mysql_secure_installation


#MaridaDBの自動起動を有効化

sudo systemctl enable mariadb

sudo systemctl is-enabled mariadb


#Composerインストール

curl -sS https://getcomposer.org/installer | php

sudo mv composer.phar /usr/bin/composer

composer


#Laravelインストール（最新バージョン）

composer create-project laravel/laravel cms

#ディレクトリ移動

cd cms

sudo composer update


################
# ここでエラー or 上手くいってないようだったら！！
################

sudo yum install php-cli php-common php-devel php-fpm php-gd php-mysqlnd php-mbstring php-pdo php-xml

sudo composer update

php artisan key:generate

################
#で解決するはず（私はこれで解決しました）
################




#BuiltInサーバーを起動：動作確認

php artisan serve --port=8080



#.env（ファイル内の同じ箇所を上書き）
DB_CONNECTION=mysql
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=c9
DB_USERNAME=root
DB_PASSWORD=root


#Composerコマンド実行
sudo composer update

#4. [完了]Webサーバー起動確認***
#4.1 Preview→ [Preview Running Application]選択
#4.2 /resouces/views/welcome.blade.php を編集して見よう！
#4.3 ブラウザ・更新で確認 →　変更確認できればOK



#データベース作成
mysql -u root -p
root [Enterキー]
create database c9;
exit;



#**********************************************
#  超大事！！！！！！！！！！！！！！！
#  いつも使うので、覚えておくか直ぐコピペできる場所に書いておきましょう！
#   37ページ
#*********************************************

#！！ [.env] 設定を変更したら必ずWebサーバーを再起動！！
------
#Webサーバー止める
[ Ctl + C ]キーでWebサーバーを止めます。
------
#Webサーバー起動（.envの再読み込み！）
php artisan serve --port=8080
-------


#6.[完了]DB接続設定完了***
#  ＜重要＞間違うと「データ構造を作成（テーブル作成）」の次章でError!



#--------------------------------------------
# <時間がかかるので設定先にやります>
# /app/Providers/ AppServiceProvider.php ファイルを修正
# Laravel5.5以上設定！
#　 58ページ
#--------------------------------------------
use Illuminate\Support\Facades\Schema; //この行を追加
use Illuminate\Support\Facades\URL;    //この行を追加
public function boot() {
   Schema::defaultStringLength(191);   //この行を追加
   URL::forceScheme('https');          //この行を追加
}

#[完了]Laravel5.5以上 対応設定 完了***





#----------------------
#phpMyAdmin設定
# 192ページ
#----------------------
cd public   ＃publicフォルダに移動

wget https://files.phpmyadmin.net/phpMyAdmin/4.9.9/phpMyAdmin-4.9.9-all-languages.zip

unzip phpMyAdmin-4.9.9-all-languages.zip

cd ..


#＜手順解説＞
#5.1 publicフォルダ内に「phpMyAdmin-4.8.3-all-languages」フォルダが作成される 
#5.2 フォルダ名が長いので「phpMyAdmin」に変更
#5.3「Preview」でサイトを開き、URLの最後に「phpMyAdmin/index.php」をつけてEnterキーを押す
#5.4 URL例： https://＊＊＊＊＊＊.cloud9.us-east-1.amazonaws.com/phpMyAdmin/index.php
#5.5 phpMyAdmin画面が表示されたら： ユーザー名・パスワードともに「root」を入力してログイン
#5.6 ログインできればOK

#5.[完了]DB動作＆コマンド確認完了***

#*********************************************************************************
#ここまでが初期設定
#*********************************************************************************






#***************************
# ◇第２章◇
# データ構造を作成（テーブル作成） 
#***************************
#--------------------------------------------
#１．booksテーブルを作成（マイグレーションファイル作成）
#    53ページ
#--------------------------------------------
php artisan make:migration create_books_table --create=books

#1.[完了]Tableを作成するMigrationファイルを作成 完了***


#--------------------------------------------
#２．[年]_[月]_[日]_[時分秒]_create_books_table.php
#   57ページ
#   public function up(){...}の中を追加修正
#--------------------------------------------
public function up()
    {
        Schema::create('books', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('item_name');
            $table->integer('item_number');
            $table->integer('item_amount');
            $table->datetime('published');
            $table->timestamps();
        });
}

#2.[完了]Table作成するスクリプト準備 完了***


#--------------------------------------------
#３．マイグレーションを実行（テーブル作成）
#   52ページ
#--------------------------------------------
php artisan migrate

#3.[完了]Table作成スクリプト実行 完了***


#--------------------------------------------
#４．MySQL DBに作成されたテーブルを確認 
#   59ページ
#--------------------------------------------
#ブラウザで確認：する場合[phpMyAdmin]
# URL例： https://***********.com/phpMyAdmin/

# ※コマンドで確認する場合（コマンドに慣れてる人用）
mysql -u root -p
root [Enterキー]
use c9;
show tables;
desc books;
exit;


#4.[完了]Table作成をMySQLコマンドで確認 完了***



#--------------------------------------------
#５．モデルを作成（テーブルを簡単に扱えるようにする機能）
  64ページ
#--------------------------------------------
php artisan make:model Book

#5.[完了]DBを簡単に操作するためのファイルを作成 完了***


#--------------------------------------------
#６．モデルを作成（テーブルを簡単に扱えるようにする機能）
#   65ページ
#   /app/Book.php に作成されます。
#--------------------------------------------

#6.[完了]/app/Book.phpにファイルができて完了***



#***************************
# 第３章
# ルート定義（ルーティング）
#***************************
#--------------------------------------------
#１．/routes/web.php に 以下コードを貼り付けます。
#   70ページ
#--------------------------------------------
#以下[END]までの全てのコードをコピー


use App\Models\Book;
use Illuminate\Http\Request;

/**
* 本のダッシュボード表示(books.blade.php)
*/
Route::get('/', function () {
    return view('welcome');
});

/**
* 新「本」を追加 
*/
Route::post('/books', function (Request $request) {
    //
});

/**
* 本を削除 
*/
Route::delete('/book/{book}', function (Book $book) {
    //
});



#[END]--------------------------------------------





#***************************
# View
#***************************
#--------------------------------------------
#１．/resources/views/layouts/app.blade.php を作成
#   以下コードを貼り付けます。
#--------------------------------------------
#以下[END]までの全てのコードをコピー


<!-- resources/views/layouts/app.blade.php -->
<!DOCTYPE html>
<html lang="ja">
<head>
<title>Book List</title>
<!-- CSS と JavaScript -->
</head>
<body>
    <div class="container">
        <nav class="navbar navbar-default">
        <!-- ナビバーの内容 -->
        </nav>
    </div>
    @yield('content')
</body>
</html>


#[END]--------------------------------------------




#--------------------------------------------
#２．/resources/views/books.blade.php を作成
#   78ページ
#   以下コードを貼り付けます。
#--------------------------------------------
#以下[END]までの全てのコードをコピー


<!-- resources/views/books.blade.php -->
@extends('layouts.app')
@section('content')
    <!-- Bootstrapの定形コード… -->
    <div class="card-body">
        <div class="card-title">
            本のタイトル
        </div>
        
        <!-- バリデーションエラーの表示に使用-->
        @include('common.errors')
        <!-- バリデーションエラーの表示に使用-->

        <!-- 本登録フォーム -->
        <form action="{{ url('books') }}" method="POST" class="form-horizontal">
            {{ csrf_field() }}

            <!-- 本のタイトル -->
            <div class="form-group">
                <div class="col-sm-6">
                    <input type="text" name="item_name" class="form-control">
                </div>
            </div>

            <!-- 本 登録ボタン -->
            <div class="form-group">
                <div class="col-sm-offset-3 col-sm-6">
                    <button type="submit" class="btn btn-primary">
                        Save
                    </button>
                </div>
            </div>
        </form>
    </div>
    <!-- Book: 既に登録されてる本のリスト -->

@endsection



#[END]--------------------------------------------





#--------------------------------------------
# ３．/resources/views/common/errors.blade.php を作成 
# 81ページ
# 以下コードを貼り付けます。
#--------------------------------------------
#以下[END]までの全てのコードをコピー


<!-- resources/views/common/errors.blade.php -->
@if (count($errors) > 0)
    <!-- Form Error List -->
    <div class="alert alert-danger">
        <div><strong>入力した文字を修正してくた?さい。</strong></div> 
        <div>
            <ul>
            @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
            </ul>
        </div>
    </div>
@endif



#[END]--------------------------------------------




#--------------------------------------------
#４．/routes/web.php  以下コードに修正
#   70ページ
#--------------------------------------------
#以下[END]までの全てのコードをコピー

/**
* 本のダッシュボード表示(books.blade.php)
*/
Route::get('/', function () {
    return view('books');  //＊＊ ここを修正 ＊＊
});




#***************************
# Chapter10
#***************************
#--------------------------------------------
#１．/routes/web.php
#   86ページ
#   『新「本」を追加』のルート定義に以下コードを上書き。
#--------------------------------------------
#以下[END]までの全てのコードをコピー


Route::post('/books', function (Request $request) {

    //バリデーション
    $validator = Validator::make($request->all(), [
        'item_name' => 'required|max:255',
    ]);

    //バリデーション:エラー 
    if ($validator->fails()) {
        return redirect('/')
            ->withInput()
            ->withErrors($validator);
    }
    //以下に登録処理を記述（Eloquentモデル）




});


#[END]--------------------------------------------




#--------------------------------------------
#２．/routes/web.php 
#   88ページ
#   //以下に登録処理を記述（Eloquentモデル）コメントの下に以下コードを貼り付けます。
#--------------------------------------------
#以下[END]までの全てのコードをコピー


// Eloquentモデル
$books = new Book;
$books->item_name = $request->item_name;
$books->item_number = '1';
$books->item_amount = '1000';
$books->published = '2017-03-07 00:00:00';
$books->save(); 
return redirect('/');


#[END]--------------------------------------------



#***************************
# Chapter11
#***************************
#--------------------------------------------
#１．/routes/web.php
#   90ページ
#   『本のダッシュボード表示 』のルート定義に以下コードを上書き。
#--------------------------------------------
#以下[END]までの全てのコードをコピー


Route::get('/', function () {
    $books = Book::orderBy('created_at', 'asc')->get();
    return view('books', [
        'books' => $books
    ]);
    //return view('books',compact('books')); //も同じ意味
});


#[END]--------------------------------------------




#--------------------------------------------
#２．/resources/views/books.blade.php
#   91ページ
#   books.blade.php内の</form>タグの下行に以下コート?を追記
#--------------------------------------------
#以下[END]までの全てのコードをコピー


     <!-- 現在の本 -->
    @if (count($books) > 0)
        <div class="card-body">
            <div class="card-body">
                <table class="table table-striped task-table">
                    <!-- テーブルヘッダ -->
                    <thead>
                        <th>本一覧</th>
                        <th>&nbsp;</th>
                    </thead>
                    <!-- テーブル本体 -->
                    <tbody>
                        @foreach ($books as $book)
                            <tr>
                                <!-- 本タイトル -->
                                <td class="table-text">
                                    <div>{{ $book->item_name }}</div>
                                </td>

                                <!-- 本: 削除ボタン -->
                                <td>

                                </td>
                            </tr>
                        @endforeach
                    </tbody>
                </table>
            </div>
        </div>
    @endif



#[END]--------------------------------------------




#***************************
# Chapter1２
#***************************
#--------------------------------------------
#１．/resources/views/books.blade.php
#   96ページ
#   <!-- 本: 削除ボタン -->下の<td></td>要素内に追加
#--------------------------------------------
#以下[END]までの全てのコードをコピー


    <form action="{{ url('book/'.$book->id) }}" method="POST">
         {{ csrf_field() }}
         {{ method_field('delete') }}
        
        <button type="submit" class="btn btn-danger">
            削除
        </button>
     </form>



#[END]--------------------------------------------




#--------------------------------------------
#２．/routes/web.php
#   98ページ
#   『本を削除』のルート定義を追加編集
#--------------------------------------------
#以下[END]までの全てのコードをコピー


Route::delete('/book/{book}', function (Book $book) {
    $book->delete();       //追加
    return redirect('/');  //追加
});



#[END]--------------------------------------------




#***************************
# Login
#***************************
#--------------------------------------------
# Auth( ユーザー登録・認証画面 )
#--------------------------------------------
# laravel/ui パッケージをインストール（４ステップ！）
# 【注意】Laraveのバージョンを確認して実行しないとErrorになります！！
#  コマンド打って、yes/no がでたらyes で！！
-----

#1. Laravel 8.x の場合
composer require laravel/ui

#2. artisan コマンドを実行
php artisan ui vue --auth

#3. npmパッケージをインストール
npm install

#4. パッケージをビルド
npm run dev

--------------------------------------------------
// ログイン機能・画面が作成されました。



#重要事項：DBについて
#こちらのAmazonLinux2で環境作った場合は
#MariaDBは自動で起動するので毎回DBを起動する必要はありません。
#※AmazonLinux AMI（旧AmazonLinux1）の場合は毎回CLOUD9起動時に必要です！








